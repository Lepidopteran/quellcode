use gtk::gdk::Display;
use gtk::prelude::*;
use gtk::DropDown;
use gtk::Label;
use gtk::Paned;
use gtk::TextBuffer;
use gtk::{glib, Application, ApplicationWindow};
use syntect::highlighting::ThemeSet;
use syntect::html::css_for_theme_with_class_style;
use syntect::html::ClassStyle;
use syntect::parsing::SyntaxSet;

const APP_ID: &str = "org.gtk_rs.HelloWorld2";

fn main() -> glib::ExitCode {
    let app = Application::builder().application_id(APP_ID).build();

    app.connect_activate(build_ui);

    app.run()
}

fn build_ui(app: &Application) {
    let vbox = gtk::Box::builder()
        .orientation(gtk::Orientation::Vertical)
        .spacing(10)
        .margin_start(10)
        .margin_end(10)
        .margin_top(10)
        .margin_bottom(10)
        .build();

    let syntax_set = SyntaxSet::load_defaults_newlines();
    let lang_selection = build_lang_selection(&syntax_set);

    let text_vbox = gtk::Box::builder()
        .orientation(gtk::Orientation::Vertical)
        .css_classes(["code"])
        .spacing(10)
        .margin_start(10)
        .margin_end(10)
        .margin_top(10)
        .margin_bottom(10)
        .build();

    let text = TextBuffer::builder().build();

    // text.connect_changed(move |buffer| {
    //     let text = buffer.text(&buffer.start_iter(), &buffer.end_iter(), false);
    //
    //     for line in text.lines() {
    //        &text_vbox.append(&Label::builder().label(line).build()); 
    //     }
    // });

    let text_input = gtk::TextView::builder()
        .buffer(&text)
        .build();

    vbox.append(&Label::builder().label("Select a language").build());
    vbox.append(&lang_selection);
    vbox.append(&text_input);

    let paned = Paned::builder()
        .orientation(gtk::Orientation::Horizontal)
        .start_child(&text_vbox)
        .end_child(&vbox)
        .build();

    // Create a window and set the title
    let window = ApplicationWindow::builder()
        .application(app)
        .title("My GTK App")
        .default_width(800)
        .default_height(600)
        .child(&paned)
        .build();

    // Present window
    window.present();
}

fn load_theme() {
    let theme_set = ThemeSet::load_defaults();
    let theme = theme_set.themes.get("base16-ocean.dark").unwrap();
    let provider = gtk::CssProvider::new();

    provider.load_from_string(include_str!("../assets/gtk.css"));
    gtk::style_context_add_provider_for_display(
        &Display::default().expect("Could not connect to a display."),
        &provider,
        gtk::STYLE_PROVIDER_PRIORITY_APPLICATION,
    );
}

fn build_lang_selection(syntax_set: &SyntaxSet) -> DropDown {
    let langs: Vec<_> = syntax_set
        .syntaxes()
        .iter()
        .map(|s| s.name.as_str())
        .collect();

    let drop_down = DropDown::from_strings(&langs);

    #[allow(clippy::let_and_return)]
    drop_down
}
